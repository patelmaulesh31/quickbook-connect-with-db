using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.IO;
using System.Security.Cryptography;
using Microsoft.Win32;
using System.Xml;
using System.Text.RegularExpressions;
using Interop.QBXMLRP2Lib;
using System.Data.SqlClient;
using QBWC_Service.Class;
using System.Collections.Generic;
using System.Web.Script.Serialization;
using System.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace QBWC_Service
{
    /// <summary>
    ///  Web Service Namespace="http://developer.intuit.com/",
    ///  Web Service Name="QBWC_Service",
    ///  Web Service Description="Sample WebService in ASP.NET to
    ///  demonstrate QBWebConnector with QuickBooks POS
    /// </summary>
    [WebService(
         Namespace = "http://developer.intuit.com/",
         Name = "QBWC_Service",
         Description = "Sample WebService in ASP.NET to demonstrate " +
                "QBWebConnector with QuickBooks POS")]


    // Important Note:
    // You should keep the namespace as http://developer.intuit.com/ for all web
    // services that communicates with QuickBooks Web Connector. 




    public class QBWC_WebService : System.Web.Services.WebService
    {
        #region GlobalVariables
        System.Diagnostics.EventLog evLog = new System.Diagnostics.EventLog();
        public int count = 0;
        public int total = 0;
        public bool IsVendorInserted = false;
        public bool IsCustomerInserted = false;
        public bool IsVendorfetched = false;
        public bool IsCustomerfetched = false;
        public bool IsCOAccount = false;

        public bool IsItemFetched = false;
        public bool IsItemInserted = false;
        public bool IsCustomerInvoice = false;
        public bool IsVendorCreditInvoice = false;
        public bool IsCreditCardChargeInvoice = false;
        public bool IsCreditcardChargeInvoiceInserted = false;
        public bool ISJournalEntryInserted = false;
        public bool IscustomerresponseInserted = false;
        public bool IscustomerInserted = false;
        public bool IsInvoiceFetched = false;
        public bool IsCreditcardChargeInvoiceFetched = false;
        public ArrayList req = new ArrayList();
        public static string url = HttpContext.Current.Request.Url.AbsoluteUri;
        public static Uri myUri = new Uri(url);
        public static string PropertyCode = HttpUtility.ParseQueryString(myUri.Query).Get("PropertyCode");
        public static string cs = ConfigurationManager.ConnectionStrings["DevelopmentEntities"].ConnectionString;

        public static string PropertyId = ConfigurationManager.AppSettings["PropertyId"];
        public static string QBFileName = ConfigurationManager.AppSettings["QBFileName"];
        public static string QBPassword = ConfigurationManager.AppSettings["QBPassword"];
        public static string QBUsername = "USERNAME";

        //public static string PropertyId = string.Empty; 
        //public static string QBFileName = string.Empty; 
        //public static string QBPassword = string.Empty; 
        //public static string QBUsername = string.Empty;

        SqlConnection con = new SqlConnection(cs);
        #endregion


        #region Constructor
        public QBWC_WebService()
        {
            //CODEGEN: This call is required by the ASP.NET
            //Web Services Designer
            InitializeComponent();
            // Initializing EventLog for logging
            initEvLog();
            //Initializingdata
            //QBWebConnecotr objhelper = Helper.GetQuickBookDetails(con, PropertyCode);
            //PropertyId = objhelper.PropertyId;
            //QBFileName = objhelper.QBFileName;
            //QBUsername = objhelper.QBUserName;
            //QBPassword = objhelper.QBPassword;
        }
        #endregion


        #region AutoGeneratedMethods
        //Required by the Web Services Designer 
        private IContainer components = null;


        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {

        }



        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }


        #endregion


        #region WebMethods
        [WebMethod]
        /// <summary>
        /// WebMethod - getInteractiveURL()
        /// 
        /// Signature: public string getInteractiveURL(string wcTicket, string sessionID)
        ///
        /// IN: 
        /// string wcTicket
        /// string sessionID
        ///
        /// OUT: 
        /// URL string 
        /// Possible values: 
        /// URL to a website
        /// </summary>
        public string getInteractiveURL(string wcTicket, string sessionID)
        {
            return "";
        }

        [WebMethod]
        /// <summary>
        /// WebMethod - interactiveRejected()
        /// 
        /// Signature: public string interactiveRejected(string wcTicket, string reason)
        ///
        /// IN: 
        /// string wcTicket
        /// string reason
        ///
        /// OUT: 
        /// string 
        /// </summary>
        public string interactiveRejected(string wcTicket, string reason)
        {
            return "";
        }

        [WebMethod]
        /// <summary>
        /// WebMethod - interactiveDone()
        /// 
        /// Signature: public string interactiveDone(string wcTicket)
        ///
        /// IN: 
        /// string wcTicket
        ///
        /// OUT: 
        /// string 
        /// </summary>
        public string interactiveDone(string wcTicket)
        {
            return "";
        }

        [WebMethod]
        /// <summary>
        /// WebMethod - serverVersion()
        /// To enable web service with its version number returned back to QBWC
        /// Signature: public string serverVersion()
        ///
        /// OUT: 
        /// string 
        /// Possible values: 
        /// Version string representing server version
        /// </summary>

        public string serverVersion()
        {
            string serverVersion = "2.0.0.1";
            string evLogTxt = "WebMethod: serverVersion() has been called " +
                "by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "No Parameters required.";
            evLogTxt = evLogTxt + "Returned: " + serverVersion;
            return serverVersion;
        }

        [WebMethod]
        /// <summary>
        /// WebMethod# 1 - clientVersion()
        /// To enable web service with QBWC version control
        /// Signature: public string clientVersion(string strVersion)
        ///
        /// IN:
        /// string strVersion
        ///
        /// OUT:
        /// string errorOrWarning
        /// Possible values:
        /// string retVal
        /// - NULL or <emptyString> = QBWC will let the web service update
        /// - "E:<any text>" = popup ERROR dialog with <any text>
        /// - abort update and force download of new QBWC.
        /// - "W:<any text>" = popup WARNING dialog with <any text>
        /// - choice to user, continue update or not.
        /// </summary>
        public string clientVersion(string strVersion)
        {
            string evLogTxt = "WebMethod: clientVersion() has been called " +
                "by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received:\r\n";
            evLogTxt = evLogTxt + "string strVersion = " + strVersion + "\r\n";
            evLogTxt = evLogTxt + "\r\n";


            string retVal = null;
            double recommendedVersion = 1.5;
            double supportedMinVersion = 1.0;
            double suppliedVersion = Convert.ToDouble(this.parseForVersion(strVersion));
            evLogTxt = evLogTxt + "QBWebConnector version = " + strVersion + "\r\n";
            evLogTxt = evLogTxt + "Recommended Version = " + recommendedVersion.ToString() + "\r\n";
            evLogTxt = evLogTxt + "Supported Minimum Version = " + supportedMinVersion.ToString() + "\r\n";
            evLogTxt = evLogTxt + "SuppliedVersion = " + suppliedVersion.ToString() + "\r\n";
            if (suppliedVersion < recommendedVersion)
            {
                retVal = "W:We recommend that you upgrade your QBWebConnector";
            }
            else if (suppliedVersion < supportedMinVersion)
            {
                retVal = "E:You need to upgrade your QBWebConnector";
            }
            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string retVal = " + retVal;
            logEvent(evLogTxt);
            return retVal;
        }

        [WebMethod]
        /// <summary>
        /// WebMethod# 2 - authenticate()
        /// To verify username and password for the web connector that is trying to connect
        /// Signature: public string[] authenticate(string strUserName, string strPassword)
        ///
        /// IN:
        /// string strUserName
        /// string strPassword
        ///
        /// OUT:
        /// string[] authReturn
        /// Possible values:
        /// string[0] = ticket
        /// string[1]
        /// - empty string = use current company file
        /// - "none" = no further request/no further action required
        /// - "nvu" = not valid user
        /// - any other string value = use this company file
        /// </summary>
        public string[] authenticate(string strUserName, string strPassword)
        {
            string evLogTxt = "WebMethod: authenticate() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received:\r\n";
            evLogTxt = evLogTxt + "string strUserName = " + strUserName + "\r\n";
            evLogTxt = evLogTxt + "string strPassword = " + strPassword + "\r\n";
            evLogTxt = evLogTxt + "\r\n";
            string[] authReturn = new string[2];
            // Code below uses a random GUID to use as session ticket
            // An example of a GUID is {85B41BEE-5CD9-427a-A61B-83964F1EB426}
            authReturn[0] = System.Guid.NewGuid().ToString();


            // For simplicity of sample, a hardcoded username/password is used.
            // In real world, you should handle authentication in using a standard way.
            // For example, you could validate the username/password against an LDAP
            // or a directory server
            string pwd = QBPassword;
            evLogTxt = evLogTxt + "Password locally stored = " + pwd + "\r\n";
            if (strUserName.ToUpper().Trim().Equals(QBUsername.ToUpper()) && strPassword.ToUpper().Trim().Equals(pwd.ToUpper()))
            {
                // An empty string for authReturn[1] means asking QBWebConnector
                // to connect to the company file that is currently openned in QB
                //authReturn[1] = "C:\\Users\\Public\\Documents\\Intuit\\QuickBooks\\Company Files\\Eidenburg.qbw";
                //authReturn[1] = "C:\\Users\\Public\\Documents\\Intuit\\QuickBooks\\Holiday_Cookie_Live.qbw";
                authReturn[1] = QBFileName;
            }
            else
            {
                authReturn[1] = "nvu";
            }
            // You could also return "none" to indicate there is no work to do
            // or a company filename in the format C:\full\path\to\company.qbw
            // based on your program logic and requirements.
            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string[] authReturn[0] = " + authReturn[0].ToString() + "\r\n";
            evLogTxt = evLogTxt + "string[] authReturn[1] = " + authReturn[1].ToString();
            logEvent(evLogTxt);
            return authReturn;
        }

        [WebMethod(Description = "This web method facilitates web service to handle connection errors between QuickBooks and QBWebConnector", EnableSession = true)]
        /// <summary>
        /// WebMethod# 3 - connectionError()
        /// To facilitate capturing of QuickBooks error and notifying it to web services
        /// Signature: public string connectionError (string ticket, string hresult, string message)
        ///
        /// IN:
        /// string ticket = A GUID based ticket string to maintain identity of QBWebConnector
        /// string hresult = An HRESULT value thrown by QuickBooks when trying to make connection
        /// string message = An error message corresponding to the HRESULT
        ///
        /// OUT:
        /// string retVal
        /// Possible values:
        /// - “done” = no further action required from QBWebConnector
        /// - any other string value = use this name for company file
        /// </summary>
        public string connectionError(string ticket, string hresult, string message)
        {
            if (Session["ce_counter"] == null)
            {
                Session["ce_counter"] = 0;
            }


            string evLogTxt = "WebMethod: connectionError() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received:\r\n";
            evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\fn";
            evLogTxt = evLogTxt + "string hresult = " + hresult + "\r\n";
            evLogTxt = evLogTxt + "string message = " + message + "\r\n";
            evLogTxt = evLogTxt + "\r\n";


            string retVal = null;
            //-2147418113 = Can't connect to the database
            const string CANT_CONNECT_TO_DB = "0x8000FFFF";
            // Add more as you need...


            if (hresult.Trim().Equals(CANT_CONNECT_TO_DB))
            {
                evLogTxt = evLogTxt + "HRESULT = " + hresult + "\r\n";
                evLogTxt = evLogTxt + "Message = " + message + "\r\n";
                retVal = "DONE";
            }
            else
            {
                // Depending on various hresults return different value 
                if ((int)Session["ce_counter"] == 0)
                {
                    // Try again with this company file
                    evLogTxt = evLogTxt + "HRESULT = " + hresult + "\r\n";
                    evLogTxt = evLogTxt + "Message = " + message + "\r\n";
                    evLogTxt = evLogTxt + "Sending connection string as \"Company Data=\" to QBWebConnector.";
                    retVal = "Company Data=";
                }
                else
                {
                    evLogTxt = evLogTxt + "HRESULT = " + hresult + "\r\n";
                    evLogTxt = evLogTxt + "Message = " + message + "\r\n";
                    evLogTxt = evLogTxt + "Sending DONE to stop.";
                    retVal = "DONE";
                }
            }
            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string retVal = " + retVal + "\r\n";
            logEvent(evLogTxt);
            Session["ce_counter"] = ((int)Session["ce_counter"]) + 1;
            return retVal;
        }


       
     
        //using (SqlConnection con = new SqlConnection(constr))
        //{
        //    using (SqlCommand cmd = new SqlCommand("select top 100 * from tblmstorders where intorderid not in (select intorderid from tblmstreturn)"))
        //    /*select * from Ap_invoices where QuickbookListId not in ('QL101')")*/
        //    {
        //        using (SqlDataAdapter sda = new SqlDataAdapter())
        //        {
        //            cmd.Connection = con;
        //            sda.SelectCommand = cmd;
        //            using (DataTable dt = new DataTable())
        //            {
        //                dt.TableName = "Ap_invoices";
        //                sda.Fill(dt);
        //                return dt;
        //            }
        //        }
        //    }

        //}


      



        //[WebMethod]
        //public DataTable InsertInvoice()
        //{
        //    string constr = ConfigurationManager.ConnectionStrings["DevelopmentEntities"].ConnectionString;
        //    using (SqlConnection con = new SqlConnection(constr))
        //    {
        //        using (SqlCommand cmd = new SqlCommand("select top 100 * from tblmstorders where intorderid not in (select intorderid from tblmstreturn)"))
        //        {
        //            using (SqlDataAdapter sda = new SqlDataAdapter())
        //            {
        //                cmd.Connection = con;
        //                sda.SelectCommand = cmd;
        //                using (DataTable dt = new DataTable())
        //                {
        //                    dt.TableName = "Ap_invoices";
        //                    sda.Fill(dt);
        //                    return dt;
        //                }
        //            }
        //        }

        //    }
        //}



        [WebMethod(Description = "This web method facilitates web service to send request XML to QuickBooks via QBWebConnector", EnableSession = true)]
        /// <summary>
        /// WebMethod# 4 - sendRequestXML()
        /// Signature: public string sendRequestXML(string ticket, string strHCPResponse, string strCompanyFileName,
        /// string Country, int qbXMLMajorVers, int qbXMLMinorVers)
        ///
        /// IN:
        /// int qbXMLMajorVers
        /// int qbXMLMinorVers
        /// string ticket
        /// string strHCPResponse
        /// string strCompanyFileName
        /// string Country
        /// int qbXMLMajorVers
        /// int qbXMLMinorVers
        ///
        /// OUT:
        /// string request
        /// Possible values:
        /// - “any_string” = Request XML for QBWebConnector to process
        /// - "" = No more request XML
        /// </summary>
        /// 
        public string sendRequestXML(string ticket, string strHCPResponse, string strCompanyFileName,
            string qbXMLCountry, int qbXMLMajorVers, int qbXMLMinorVers)
        {
            try
            {

                if (Session["Customercounter"] == null)
                {
                    Session["Customercounter"] = 0;
                }
                if (Session["Customertotal"] == null)
                {
                    Session["Customertotal"] = 0;
                }

                if (Session["IsCustomerInserted"] == null)
                {
                    Session["IsCustomerInserted"] = false;
                }

                if (Session["Itemcounter"] == null)
                {
                    Session["Itemcounter"] = 0;
                }
                if (Session["Itemtotal"] == null)
                {
                    Session["Itemtotal"] = 0;
                }
                if (Session["Invoicecounter"] == null)
                {
                    Session["Invoicecounter"] = 0;
                }
                if (Session["Invoicetotal"] == null)
                {
                    Session["Invoicetotal"] = 0;
                }
                string evLogTxt = "WebMethod: sendRequestXML() has been called by QBWebconnector" + "\r\n\r\n";
                evLogTxt = evLogTxt + "Parameters received:\r\n";
                evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
                evLogTxt = evLogTxt + "string strHCPResponse = " + strHCPResponse + "\r\n";
                evLogTxt = evLogTxt + "string strCompanyFileName = " + strCompanyFileName + "\r\n";
                evLogTxt = evLogTxt + "string qbXMLCountry = " + qbXMLCountry + "\r\n";
                evLogTxt = evLogTxt + "int qbXMLMajorVers = " + qbXMLMajorVers.ToString() + "\r\n";
                evLogTxt = evLogTxt + "int qbXMLMinorVers = " + qbXMLMinorVers.ToString() + "\r\n";
                evLogTxt = evLogTxt + "\r\n";

                string request = "";

                // Insert customer from DB to QB
                IsCustomerInserted = Helper.Check_CustomeravailableFOrInsert(con);
                if (IsCustomerInserted)
                {
                    ArrayList req = Helper.InsertXMLBlob_CustomersQuery(con);
                    total = Convert.ToInt32(Session["Customertotal"]);
                    total = req.Count;
                     count = Convert.ToInt32(Session["Customercounter"]);
                    if (total > 0)
                    {
                        if (count < total)
                        {
                            request = req[count].ToString();
                            Session["Customertotal"] = total;
                        }
                        else
                        {
                            count = 0;
                            Session["Customercounter"] = 0;
                            request = "";
                        }
                        evLogTxt = evLogTxt + "\r\n";
                        evLogTxt = evLogTxt + "Return values: " + "\r\n";
                        evLogTxt = evLogTxt + "string request = " + request + "\r\n";
                        logEvent(evLogTxt);
                        Session["IsCustomerInserted"] = true;
                    }
                }


                // Item insert from DB to QBIsCustomerInserted
                IsItemInserted = Helper.Check_ItemvailableFOrInsert(con);
                // not needed item
                if (IsItemInserted)
                {
                    ArrayList req = Helper.InsertXMLBlob_ItemQuery(con);
                    total = Convert.ToInt32(Session["Itemtotal"]);
                    total = req.Count;
                    count = Convert.ToInt32(Session["Itemcounter"]);
                    if (total >= 0)
                    {
                        if (count < total)
                        {
                            request = req[count].ToString();
                            Session["Itemtotal"] = total;
                        }
                        else
                        {
                            count = 0;
                            Session["Itemcounter"] = 0;
                            request = "";
                        }
                        evLogTxt = evLogTxt + "\r\n";
                        evLogTxt = evLogTxt + "Return values: " + "\r\n";
                        evLogTxt = evLogTxt + "string request = " + request + "\r\n";
                        logEvent(evLogTxt);
                        Session["IsItemInserted"] = true;
                    }

                }
                else
                {
                    Session["IsItemInserted"] = false;
                    // Session["IsCustomerInvoice"] = true;
                }

                // Insert Invoice  from DB to QB

                IsCustomerInvoice = Helper.Check_InvoiceavailableFOrInsert(con);
                if (IsCustomerInvoice && IsItemInserted && IsCustomerInserted)
                {
                    ArrayList req = Helper.InsertXMLBlob_BillsQuery(con);
                    total = Convert.ToInt32(Session["Invoicetotal"]);
                    total = req.Count;
                    count = Convert.ToInt32(Session["Invoicecounter"]);
                    if (total > 0)
                    {
                        if (count < total)
                        {
                            request = req[count].ToString();
                            Session["Invoicetotal"] = total;
                        }
                        else
                        {
                            count = 0;
                            Session["Invoicecounter"] = 0;
                            request = "";
                        }
                        evLogTxt = evLogTxt + "\r\n";
                        evLogTxt = evLogTxt + "Return values: " + "\r\n";
                        evLogTxt = evLogTxt + "string request = " + request + "\r\n";
                        logEvent(evLogTxt);
                        Session["IsCustomerInvoice"] = true;
                    }
                }

                return request;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        [WebMethod(Description = "This web method facilitates web service to receive response XML from QuickBooks via QBWebConnector", EnableSession = true)]
        /// <summary>
        /// WebMethod# 5 - receiveResponseXML()
        /// Signature: public int receiveResponseXML(string ticket, string response, string hresult, string message)
        ///
        /// IN:
        /// string ticket
        /// string response
        /// string hresult
        /// string message
        ///
        /// OUT:
        /// int retVal
        /// Greater than zero  = There are more request to send
        /// 100 = Done. no more request to send
        /// Less than zero  = Custom Error codes
        /// </summary>
        public int receiveResponseXML(string ticket, string response, string hresult, string message)
        {
            try
            {
                if (Session["IscustomerresponseInserted"] == null)
                {
                    Session["IscustomerresponseInserted"] = false;
                }

                string evLogTxt = "WebMethod: receiveResponseXML() has been called by QBWebconnector" + "\r\n\r\n";
                evLogTxt = evLogTxt + "Parameters received:\r\n";
                evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
                evLogTxt = evLogTxt + "string response = " + response + "\r\n";

                int retVal = 0;
                int progress = 0;


                IsCustomerfetched = Convert.ToBoolean(Session["IsCustomerfetched"]);

                // 2 fetch quickbook data & insert in system
                IscustomerresponseInserted = Convert.ToBoolean(Session["IscustomerresponseInserted"]);

                if (!IscustomerresponseInserted)
                {
                    if (IsCustomerfetched)
                    {

                        string Status = "";
                        System.IO.MemoryStream ms = new System.IO.MemoryStream(System.Text.Encoding.UTF8.GetBytes(response));
                        System.Xml.XmlReader xr = System.Xml.XmlReader.Create(ms);
                        while (xr.Read())
                        {
                            if (xr.NodeType == System.Xml.XmlNodeType.Element)
                            {
                                string VendorQuery = "CustomerQueryRs";
                                if (xr.Name.ToLower() == VendorQuery.ToLower())
                                {
                                    Status = Convert.ToString(xr["statusMessage"]);
                                }
                            }
                        }
                        if (Status == "Status OK")
                        {
                            XmlDocument xmlDoc = new XmlDocument();
                            xmlDoc.LoadXml(response);
                            XmlNodeList nodeList = xmlDoc.DocumentElement.SelectNodes("descendant::CustomerRet");
                            foreach (XmlNode node in nodeList)
                            {
                                Vendor objvendor = new Vendor();
                                objvendor.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                                objvendor.FullName = node.SelectSingleNode("EditSequence")?.InnerText ?? "";
                                objvendor.VendorName = node.SelectSingleNode("Name")?.InnerText ?? "";
                                objvendor.VendorEmail = node.SelectSingleNode("FullName")?.InnerText ?? "";
                                objvendor.VendorContact = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                                objvendor.AccountNumber = node.SelectSingleNode("BillAddress")?.InnerText ?? "";
                                objvendor.Address1 = node.SelectSingleNode("Phone")?.InnerText ?? "";
                                objvendor.City = node.SelectSingleNode("Email")?.InnerText ?? "";
                                objvendor.City = node.SelectSingleNode("AccountNumber")?.InnerText ?? "";


                                //int VendorId = Helper.InsertCustomerQuickbook_to_system(con, objvendor);

                                ////Insertlog
                                //if (VendorId > 0)
                                //{
                                //    QuickbookLog objQuickbookLog = new QuickbookLog();
                                //    objQuickbookLog.Status = Status;
                                //    objQuickbookLog.VendorId = VendorId;
                                //    objQuickbookLog.AccountSubTypeId = 0;
                                //    objQuickbookLog.InvoiceId = 0;
                                //    objQuickbookLog.AccountId = 0;
                                //    objQuickbookLog.VendorName = node.SelectSingleNode("Name")?.InnerText ?? "";
                                //    objQuickbookLog.PropertyId = Convert.ToInt32(PropertyId);
                                //    objQuickbookLog.Process = "Quickbook to Inngenius";
                                //    objQuickbookLog.StatusDes = "Imported successfully";
                                //    objQuickbookLog.importdate = DateTime.Now;
                                //    objQuickbookLog.QuickbookListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                                //    objQuickbookLog.QuickbookFullName = node.SelectSingleNode("FullName")?.InnerText ?? "";
                                //    objQuickbookLog.ResponseType = "Vendor";
                                //    bool IsInsertLog = Helper.InsertQuickbookLog(con, objQuickbookLog);
                                //}

                            }

                        }
                        else
                        {
                            QuickbookLog objQuickbookLog = new QuickbookLog();
                            objQuickbookLog.VendorId = 0;
                            objQuickbookLog.Status = Status;
                            objQuickbookLog.QuickbookListId = "";
                            objQuickbookLog.StatusDes = "Imported Not successfully";
                            objQuickbookLog.PropertyId = Convert.ToInt32(PropertyId);
                            objQuickbookLog.Process = "IsVendorfetched";
                            objQuickbookLog.importdate = DateTime.Now;
                            objQuickbookLog.ResponseType = "";
                            objQuickbookLog.AccountSubTypeId = 0;
                            objQuickbookLog.InvoiceId = 0;
                            objQuickbookLog.AccountId = 0;
                            objQuickbookLog.QuickbookFullName = "";
                            objQuickbookLog.VendorName = "";
                            bool IsInsertLog = Helper.InsertQuickbookLog(con, objQuickbookLog);
                        }
                        //progress = 40;
                        Helper.sednmailnotification(con, "vendor");
                        progress = 80;//redirect to progress 80
                        Session["IsVendorfetched"] = false;
                        Session["IscustomerresponseInserted"] = true;
                        Session["IsCOAccount"] = false;
                    }
                }

                IsItemFetched = Convert.ToBoolean(Session["IsItemFetched"]);

                // 3  Item fetch
                if (!IsItemFetched)
                {
                    string Status = "";
                    System.IO.MemoryStream ms = new System.IO.MemoryStream(System.Text.Encoding.UTF8.GetBytes(response));
                    System.Xml.XmlReader xr = System.Xml.XmlReader.Create(ms);
                    while (xr.Read())
                    {
                        if (xr.NodeType == System.Xml.XmlNodeType.Element)
                            if (xr.Name == "ItemQueryRs")
                            {
                                Status = Convert.ToString(xr["statusMessage"]);
                            }
                    }
                    if (Status == "Status OK")
                    {
                        XmlDocument xmlDoc = new XmlDocument();
                        xmlDoc.LoadXml(response);
                        XmlNodeList nodeList = xmlDoc.DocumentElement.SelectNodes("descendant::ItemInventoryRet");
                        foreach (XmlNode node in nodeList)
                        {
                            Item objItem = new Item();
                            objItem.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                            objItem.ItemName = node.SelectSingleNode("FullName")?.InnerText ?? "";
                            objItem.Status = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                            long ItemId = Helper.InsertItem_Quickbook_to_system(con, objItem);
                        }
                        XmlNodeList nodeListService = xmlDoc.DocumentElement.SelectNodes("descendant::ItemServiceRet");
                        foreach (XmlNode node in nodeListService)
                        {
                            Item objItem = new Item();
                            objItem.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                            objItem.ItemName = node.SelectSingleNode("FullName")?.InnerText ?? "";
                            objItem.Status = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                            long ItemId = Helper.InsertItem_Quickbook_to_system(con, objItem);
                        }
                        XmlNodeList nodeListNonInventory = xmlDoc.DocumentElement.SelectNodes("descendant::ItemNonInventoryRet");
                        foreach (XmlNode node in nodeListNonInventory)
                        {
                            Item objItem = new Item();
                            objItem.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                            objItem.ItemName = node.SelectSingleNode("FullName")?.InnerText ?? "";
                            objItem.Status = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                            long ItemId = Helper.InsertItem_Quickbook_to_system(con, objItem);
                        }
                        XmlNodeList nodeListFixedAsset = xmlDoc.DocumentElement.SelectNodes("descendant::ItemFixedAssetRet");
                        foreach (XmlNode node in nodeListFixedAsset)
                        {
                            Item objItem = new Item();
                            objItem.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                            objItem.ItemName = node.SelectSingleNode("Name")?.InnerText ?? "";
                            objItem.Status = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                            long ItemId = Helper.InsertItem_Quickbook_to_system(con, objItem);
                        }
                        XmlNodeList nodeListOtherCharge = xmlDoc.DocumentElement.SelectNodes("descendant::ItemOtherChargeRet");
                        foreach (XmlNode node in nodeListOtherCharge)
                        {
                            Item objItem = new Item();
                            objItem.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                            objItem.ItemName = node.SelectSingleNode("FullName")?.InnerText ?? "";
                            objItem.Status = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                            long ItemId = Helper.InsertItem_Quickbook_to_system(con, objItem);
                        }
                        XmlNodeList nodeListSubtotal = xmlDoc.DocumentElement.SelectNodes("descendant::ItemSubtotalRet");
                        foreach (XmlNode node in nodeListSubtotal)
                        {
                            Item objItem = new Item();
                            objItem.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                            objItem.ItemName = node.SelectSingleNode("FullName")?.InnerText ?? "";
                            objItem.Status = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                            long ItemId = Helper.InsertItem_Quickbook_to_system(con, objItem);
                        }
                        XmlNodeList nodeListGroup = xmlDoc.DocumentElement.SelectNodes("descendant::ItemGroupRet");
                        foreach (XmlNode node in nodeListGroup)
                        {
                            Item objItem = new Item();
                            objItem.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                            objItem.ItemName = node.SelectSingleNode("FullName")?.InnerText ?? "";
                            objItem.Status = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                            long ItemId = Helper.InsertItem_Quickbook_to_system(con, objItem);
                        }
                        XmlNodeList nodeListDiscountRet = xmlDoc.DocumentElement.SelectNodes("descendant::ItemDiscountRet");
                        foreach (XmlNode node in nodeListDiscountRet)
                        {
                            Item objItem = new Item();
                            objItem.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                            objItem.ItemName = node.SelectSingleNode("FullName")?.InnerText ?? "";
                            objItem.Status = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                            long ItemId = Helper.InsertItem_Quickbook_to_system(con, objItem);
                        }
                        XmlNodeList nodeListPayment = xmlDoc.DocumentElement.SelectNodes("descendant::ItemPaymentRet");
                        foreach (XmlNode node in nodeListPayment)
                        {
                            Item objItem = new Item();
                            objItem.ListId = node.SelectSingleNode("ListID")?.InnerText ?? "";
                            objItem.ItemName = node.SelectSingleNode("FullName")?.InnerText ?? "";
                            objItem.Status = node.SelectSingleNode("IsActive")?.InnerText ?? "";
                            long ItemId = Helper.InsertItem_Quickbook_to_system(con, objItem);
                        }
                    }
                    else
                    {
                        QuickbookLog objQuickbookLog = new QuickbookLog();
                        objQuickbookLog.VendorId = 0;
                        objQuickbookLog.Status = Status;
                        objQuickbookLog.QuickbookListId = "";
                        objQuickbookLog.StatusDes = "Imported Not successfully";
                        objQuickbookLog.PropertyId = Convert.ToInt32(PropertyId);
                        objQuickbookLog.Process = "IsItemFetched";
                        objQuickbookLog.importdate = DateTime.Now;
                        objQuickbookLog.ResponseType = "";
                        objQuickbookLog.AccountSubTypeId = 0;
                        objQuickbookLog.InvoiceId = 0;
                        objQuickbookLog.AccountId = 0;
                        objQuickbookLog.QuickbookFullName = "";
                        objQuickbookLog.VendorName = "";
                        bool IsInsertLog = Helper.InsertQuickbookLog(con, objQuickbookLog);
                    }

                    progress = 60;
                    Session["IsItemFetched"] = false;
                    bool AccountNotAvailable = Helper.InsertLogAccountNotAvailable(con);

                    IsItemInserted = Helper.Check_ItemvailableFOrInsert(con);
                    IsCustomerInvoice = Helper.Check_InvoiceavailableFOrInsert(con);
                    if (!IsItemInserted && !IsCustomerInvoice && progress == 60)
                    {
                        progress = 80;
                        Session["IsItemInserted"] = false;
                        Session["IsCustomerInvoice"] = false;
                    }
                }

                IsInvoiceFetched = Convert.ToBoolean(Session["IsInvoiceFetched"]);
                if (IsInvoiceFetched && !IsItemInserted && !IsVendorInserted && !IsCOAccount && !IsItemFetched)
                {
                    string Status = "";
                    System.IO.MemoryStream ms = new System.IO.MemoryStream(System.Text.Encoding.UTF8.GetBytes(response));
                    System.Xml.XmlReader xr = System.Xml.XmlReader.Create(ms);
                    while (xr.Read())
                    {
                        if (xr.NodeType == System.Xml.XmlNodeType.Element)
                            if (xr.Name == "BillQueryRs")
                            {
                                Status = Convert.ToString(xr["statusMessage"]);
                            }
                    }
                    if (Status == "Status OK")
                    {
                        XmlDocument xmlDoc = new XmlDocument();
                        xmlDoc.LoadXml(response);
                        XmlNodeList nodeList = xmlDoc.DocumentElement.SelectNodes("descendant::BillRet");
                        foreach (XmlNode node in nodeList)
                        {
                            Bill BillDetail = new Bill();
                            BillDetail.TxnID = node.SelectSingleNode("TxnID")?.InnerText ?? "";
                            BillDetail.TxnDate = node.SelectSingleNode("TxnDate")?.InnerText ?? "";
                            BillDetail.DueDate = node.SelectSingleNode("DueDate")?.InnerText ?? "";
                            BillDetail.AmountDue = node.SelectSingleNode("AmountDue")?.InnerText ?? "";
                            BillDetail.IsPaid = node.SelectSingleNode("IsPaid")?.InnerText ?? "";
                            BillDetail.VendorListID = node.SelectSingleNode("VendorRef/ListID")?.InnerText ?? "";
                            BillDetail.VendorName = node.SelectSingleNode("VendorRef/FullName")?.InnerText ?? "";
                            BillDetail.Memo = node.SelectSingleNode("Memo")?.InnerText ?? "";
                            BillDetail.RefNumber = node.SelectSingleNode("RefNumber")?.InnerText ?? "";
                            BillDetail.PaymentDate = node.SelectSingleNode("LinkedTxn/TxnDate")?.InnerText ?? "";
                            BillDetail.InvoiceType = 1;
                            XmlDocument xmlDoc2 = new XmlDocument();
                            xmlDoc2.LoadXml(node.OuterXml);
                            XmlNodeList nodeitemlist = xmlDoc2.DocumentElement.SelectNodes("descendant::ItemLineRet");
                            XmlNodeList nodeexpenselist = xmlDoc2.DocumentElement.SelectNodes("descendant::ExpenseLineRet");
                            XmlNodeList nodeLinkedTxnlist = xmlDoc2.DocumentElement.SelectNodes("descendant::LinkedTxn");
                            BillDetail.ListItems = new List<billitem>();
                            BillDetail.ListExpense = new List<billExpense>();
                            BillDetail.ListPayment = new List<PaymentTxn>();
                            List<billitem> listbillitem = new List<billitem>();
                            List<billExpense> listbillexpense = new List<billExpense>();
                            List<PaymentTxn> listpaymenttxn = new List<PaymentTxn>();
                            foreach (XmlNode nodeitem in nodeitemlist)
                            {
                                billitem billitem = new billitem();
                                billitem.TxnLineID = nodeitem.SelectSingleNode("TxnLineID")?.InnerText ?? "";
                                billitem.itemListID = nodeitem.SelectSingleNode("ItemRef/ListID")?.InnerText ?? "";
                                billitem.ItemName = nodeitem.SelectSingleNode("ItemRef/FullName")?.InnerText ?? "";
                                billitem.Quantity = nodeitem.SelectSingleNode("Quantity")?.InnerText ?? "";
                                billitem.Cost = nodeitem.SelectSingleNode("Cost")?.InnerText ?? "";
                                billitem.Amount = nodeitem.SelectSingleNode("Amount")?.InnerText ?? "";
                                listbillitem.Add(billitem);
                            }
                            foreach (XmlNode nodeexpense in nodeexpenselist)
                            {
                                billExpense billexpenseobj = new billExpense();
                                billexpenseobj.TxnLineID = nodeexpense.SelectSingleNode("TxnLineID")?.InnerText ?? "";
                                billexpenseobj.ExpenseListID = nodeexpense.SelectSingleNode("AccountRef/ListID  ")?.InnerText ?? "";
                                billexpenseobj.ExpenseName = nodeexpense.SelectSingleNode("AccountRef/FullName")?.InnerText ?? "";
                                billexpenseobj.Amount = nodeexpense.SelectSingleNode("Amount")?.InnerText ?? "";
                                billexpenseobj.Description = nodeexpense.SelectSingleNode("Memo")?.InnerText ?? "";
                                listbillexpense.Add(billexpenseobj);
                            }
                            foreach (XmlNode nodeLinkedTxn in nodeLinkedTxnlist)
                            {
                                PaymentTxn paymenttxn = new PaymentTxn();
                                paymenttxn.TxnLineID = nodeLinkedTxn.SelectSingleNode("TxnID")?.InnerText ?? "";
                                paymenttxn.PaymentType = nodeLinkedTxn.SelectSingleNode("TxnType")?.InnerText ?? "";
                                paymenttxn.TxnDate = nodeLinkedTxn.SelectSingleNode("TxnDate")?.InnerText ?? "";
                                paymenttxn.RefNumber = nodeLinkedTxn.SelectSingleNode("RefNumber")?.InnerText ?? "";
                                paymenttxn.LinkType = nodeLinkedTxn.SelectSingleNode("LinkType")?.InnerText ?? "";
                                paymenttxn.Amount = nodeLinkedTxn.SelectSingleNode("Amount")?.InnerText ?? "";
                                listpaymenttxn.Add(paymenttxn);
                            }
                            if (listbillitem.Count > 0)
                                BillDetail.ListItems.AddRange(listbillitem);
                            if (listbillexpense.Count > 0)
                                BillDetail.ListExpense.AddRange(listbillexpense);
                            if (listpaymenttxn.Count > 0)
                                BillDetail.ListPayment.AddRange(listpaymenttxn);

                            int InvoiceID = Helper.InsertInvoiceQuickbook_to_system(con, BillDetail);
                            //Insertlog
                            if (InvoiceID > 0)
                            {
                                QuickbookLog objQuickbookLog = new QuickbookLog();
                                objQuickbookLog.Status = Status;
                                objQuickbookLog.VendorId = 0;
                                objQuickbookLog.AccountSubTypeId = 0;
                                objQuickbookLog.InvoiceId = InvoiceID;
                                objQuickbookLog.AccountId = 0;
                                objQuickbookLog.VendorName = node.SelectSingleNode("VendorRef/FullName")?.InnerText ?? "";
                                objQuickbookLog.PropertyId = Convert.ToInt32(PropertyId);
                                objQuickbookLog.Process = "Quickbook to Inngenius";
                                objQuickbookLog.StatusDes = "Imported successfully";
                                objQuickbookLog.importdate = DateTime.Now;
                                objQuickbookLog.QuickbookListId = node.SelectSingleNode("TxnID")?.InnerText ?? "";
                                objQuickbookLog.QuickbookFullName = node.SelectSingleNode("VendorRef/FullName")?.InnerText ?? "";
                                objQuickbookLog.ResponseType = "Invoice";
                                bool IsInsertLog = Helper.InsertQuickbookLog(con, objQuickbookLog);
                            }
                        }
                    }
                    else
                    {
                        QuickbookLog objQuickbookLog = new QuickbookLog();
                        objQuickbookLog.VendorId = 0;
                        objQuickbookLog.Status = Status;
                        objQuickbookLog.QuickbookListId = "";
                        objQuickbookLog.StatusDes = "Imported Not successfully";
                        objQuickbookLog.PropertyId = Convert.ToInt32(PropertyId);
                        objQuickbookLog.Process = "Quickbook to Inngenius";
                        objQuickbookLog.importdate = DateTime.Now;
                        objQuickbookLog.ResponseType = "Invoice";
                        objQuickbookLog.AccountSubTypeId = 0;
                        objQuickbookLog.InvoiceId = 0;
                        objQuickbookLog.AccountId = 0;
                        objQuickbookLog.QuickbookFullName = "";
                        objQuickbookLog.VendorName = "";
                        bool IsInsertLog = Helper.InsertQuickbookLog(con, objQuickbookLog);
                    }
                    Helper.sednmailnotification(con, "fetchinvoice");
                    progress = 90;
                    Session["IsInvoiceFetched"] = false;

                 
                }
                return 100;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        //[WebMethod]
        /// <summary>
        /// WebMethod# 6 - getLastError()
        /// Signature: public string getLastError(string ticket)
        ///
        /// IN:
        /// string ticket
        ///
        /// OUT:
        /// string retVal
        /// Possible Values:
        /// Error message describing last web service error
        /// </summary>
        public string getLastError(string ticket)
        {
            string evLogTxt = "WebMethod: getLastError() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received:\r\n";
            evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
            evLogTxt = evLogTxt + "\r\n";


            int errorCode = 0;
            string retVal = null;
            if (errorCode == -101)
            {
                retVal = "QuickBooks was not running!"; // This is just an example of custom user errors
            }
            else
            {
                retVal = "Error!";
            }
            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string retVal= " + retVal + "\r\n";
            logEvent(evLogTxt);
            return retVal;
        }


        [WebMethod]
        /// <summary>
        /// WebMethod# 7 - closeConnection()
        /// At the end of a successful update session, QBWebConnector will call this web method.
        /// Signature: public string closeConnection(string ticket)
        ///
        /// IN:
        /// string ticket
        ///
        /// OUT:
        /// string closeConnection result
        /// </summary>
        public string closeConnection(string ticket)
        {
            string evLogTxt = "WebMethod: closeConnection() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received:\r\n";
            evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
            evLogTxt = evLogTxt + "\r\n";
            string retVal = null;


            retVal = "OK";


            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string retVal= " + retVal + "\r\n";
            logEvent(evLogTxt);
            return retVal;
        }
        #endregion

        #region UtilityMethods
        private void initEvLog()
        {
            try
            {
                string source = "WCWebService";
                if (!System.Diagnostics.EventLog.SourceExists(source))
                    System.Diagnostics.EventLog.CreateEventSource(source, "Application");
                evLog.Source = source;
            }
            catch { };
            return;
        }
        private void logEvent(string logText)
        {
            try
            {
                evLog.WriteEntry(logText);
            }
            catch { };
            return;
        }
        //public ArrayList buildRequest()
        //{
        //    string strRequestXML = "";
        //    XmlDocument inputXMLDoc = null;

        //    // CustomerQuery
        //    inputXMLDoc = new XmlDocument();
        //    inputXMLDoc.AppendChild(inputXMLDoc.CreateXmlDeclaration("1.0", null, null));
        //    inputXMLDoc.AppendChild(inputXMLDoc.CreateProcessingInstruction("qbxml", "version=\"4.0\""));

        //    XmlElement qbXML = inputXMLDoc.CreateElement("QBXML");
        //    inputXMLDoc.AppendChild(qbXML);
        //    XmlElement qbXMLMsgsRq = inputXMLDoc.CreateElement("QBXMLMsgsRq");
        //    qbXML.AppendChild(qbXMLMsgsRq);
        //    qbXMLMsgsRq.SetAttribute("onError", "stopOnError");
        //    XmlElement customerQueryRq = inputXMLDoc.CreateElement("CustomerQueryRq");
        //    qbXMLMsgsRq.AppendChild(customerQueryRq);
        //    customerQueryRq.SetAttribute("requestID", "1");
        //    XmlElement maxReturned = inputXMLDoc.CreateElement("MaxReturned");
        //    customerQueryRq.AppendChild(maxReturned).InnerText = "1";

        //    strRequestXML = inputXMLDoc.OuterXml;
        //    req.Add(strRequestXML);

        //    // Clean up
        //    strRequestXML = "";
        //    inputXMLDoc = null;
        //    qbXML = null;
        //    qbXMLMsgsRq = null;
        //    maxReturned = null;

        //    // InvoiceQuery
        //    inputXMLDoc = new XmlDocument();
        //    inputXMLDoc.AppendChild(inputXMLDoc.CreateXmlDeclaration("1.0", null, null));
        //    inputXMLDoc.AppendChild(inputXMLDoc.CreateProcessingInstruction("qbxml", "version=\"4.0\""));

        //    qbXML = inputXMLDoc.CreateElement("QBXML");
        //    inputXMLDoc.AppendChild(qbXML);
        //    qbXMLMsgsRq = inputXMLDoc.CreateElement("QBXMLMsgsRq");
        //    qbXML.AppendChild(qbXMLMsgsRq);
        //    qbXMLMsgsRq.SetAttribute("onError", "stopOnError");
        //    XmlElement invoiceQueryRq = inputXMLDoc.CreateElement("InvoiceQueryRq");
        //    qbXMLMsgsRq.AppendChild(invoiceQueryRq);
        //    invoiceQueryRq.SetAttribute("requestID", "2");
        //    maxReturned = inputXMLDoc.CreateElement("MaxReturned");
        //    invoiceQueryRq.AppendChild(maxReturned).InnerText = "1";

        //    strRequestXML = inputXMLDoc.OuterXml;
        //    req.Add(strRequestXML);

        //    // Clean up
        //    strRequestXML = "";
        //    inputXMLDoc = null;
        //    qbXML = null;
        //    qbXMLMsgsRq = null;
        //    maxReturned = null;

        //    // BillQuery
        //    inputXMLDoc = new XmlDocument();
        //    inputXMLDoc.AppendChild(inputXMLDoc.CreateXmlDeclaration("1.0", null, null));
        //    inputXMLDoc.AppendChild(inputXMLDoc.CreateProcessingInstruction("qbxml", "version=\"4.0\""));

        //    qbXML = inputXMLDoc.CreateElement("QBXML");
        //    inputXMLDoc.AppendChild(qbXML);
        //    qbXMLMsgsRq = inputXMLDoc.CreateElement("QBXMLMsgsRq");
        //    qbXML.AppendChild(qbXMLMsgsRq);
        //    qbXMLMsgsRq.SetAttribute("onError", "stopOnError");
        //    XmlElement billQueryRq = inputXMLDoc.CreateElement("BillQueryRq");
        //    qbXMLMsgsRq.AppendChild(billQueryRq);
        //    billQueryRq.SetAttribute("requestID", "3");
        //    maxReturned = inputXMLDoc.CreateElement("MaxReturned");
        //    billQueryRq.AppendChild(maxReturned).InnerText = "1";

        //    strRequestXML = inputXMLDoc.OuterXml;
        //    req.Add(strRequestXML);

        //    return req;
        //}

        private string parseForVersion(string input)
        {
            // This method is created just to parse the first two version components
            // out of the standard four component version number:
            // <Major>.<Minor>.<Release>.<Build>
            //
            // As long as you get the version in right format, you could use
            // any algorithm here. 
            string retVal = "";
            string major = "";
            string minor = "";
            Regex version = new Regex(@"^(?\d+)\.(?\d+)(\.\w+){0,2}$", RegexOptions.Compiled);
            Match versionMatch = version.Match(input);
            if (versionMatch.Success)
            {
                major = versionMatch.Result("${major}");
                minor = versionMatch.Result("${minor}");
                retVal = major + "." + minor;
            }
            else
            {
                retVal = input;
            }
            return retVal;
        }

        // Commentend DAta 

        //string evLogTxt = "WebMethod: sendRequestXML() has been called by QBWebconnector" + "\r\n\r\n";
        //evLogTxt = evLogTxt + "Parameters received:\r\n";
        //        evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
        //        evLogTxt = evLogTxt + "string strHCPResponse = " + strHCPResponse + "\r\n";
        //        evLogTxt = evLogTxt + "string strCompanyFileName = " + strCompanyFileName + "\r\n";
        //        evLogTxt = evLogTxt + "string qbXMLCountry = " + qbXMLCountry + "\r\n";
        //        evLogTxt = evLogTxt + "int qbXMLMajorVers = " + qbXMLMajorVers.ToString() + "\r\n";
        //        evLogTxt = evLogTxt + "int qbXMLMinorVers = " + qbXMLMinorVers.ToString() + "\r\n";
        //        evLogTxt = evLogTxt + "\r\n";

             
        //        string strrequestxml = "";
        //XmlDocument inputxmldoc;
        //strrequestxml = "";
        //        inputxmldoc = null;
        //        inputxmldoc = new XmlDocument();
        //inputxmldoc.AppendChild(inputxmldoc.CreateXmlDeclaration("1.0", null, null));
        //        inputxmldoc.AppendChild(inputxmldoc.CreateProcessingInstruction("qbxml", "version=\"13.0\""));

        //        XmlElement qbxml = inputxmldoc.CreateElement("QBXML");
        //inputxmldoc.AppendChild(qbxml);
        //        XmlElement qbxmlmsgsrq = inputxmldoc.CreateElement("QBXMLMsgsRq");
        //qbxml.AppendChild(qbxmlmsgsrq);
        //        qbxmlmsgsrq.SetAttribute("onError", "stopOnError");

        //        XmlElement custaddrq = inputxmldoc.CreateElement("CustomerAddRq");
        //qbxmlmsgsrq.AppendChild(custaddrq);
        //        custaddrq.SetAttribute("requestID","7736".ToString());
        //        XmlElement customerAdd = inputxmldoc.CreateElement("CustomerAdd");
        //custaddrq.AppendChild(customerAdd);
        //        customerAdd.AppendChild(inputxmldoc.CreateElement("Name")).InnerText = "B2C".ToString() +"7736".ToString();
        //customerAdd.AppendChild(inputxmldoc.CreateElement("IsActive")).InnerText = "1";
        //        customerAdd.AppendChild(inputxmldoc.CreateElement("CompanyName")).InnerText = "KATJBOUTIQUEGIFTS".ToString() ?? "";
        //        customerAdd.AppendChild(inputxmldoc.CreateElement("Salutation")).InnerText = "Miss";// "mr/mrs";
        //        string VendorName = Convert.ToString("VendorName");
        //customerAdd.AppendChild(inputxmldoc.CreateElement("FirstName")).InnerText = VendorName.Length > 20 ? VendorName.Substring(0, 20) : VendorName;
        //        customerAdd.AppendChild(inputxmldoc.CreateElement("LastName")).InnerText = "";

        //        XmlElement customeraddress = inputxmldoc.CreateElement("BillAddress");
        //customerAdd.AppendChild(customeraddress);
        //        customeraddress.AppendChild(inputxmldoc.CreateElement("Addr1")).InnerText = "3647 Sweet Briar Lane".ToString() + " " + "3647 Sweet Briar Lane".ToString();
        //customeraddress.AppendChild(inputxmldoc.CreateElement("City")).InnerText = "Columbia".ToString();
        //customeraddress.AppendChild(inputxmldoc.CreateElement("State")).InnerText = "15".ToString();
        //customeraddress.AppendChild(inputxmldoc.CreateElement("PostalCode")).InnerText = "62236".ToString();

        //customerAdd.AppendChild(inputxmldoc.CreateElement("Phone")).InnerText = "618-698-0270".ToString();

        //customerAdd.AppendChild(inputxmldoc.CreateElement("Email")).InnerText = "kimmytaake1@gmail.com".ToString();
        //customerAdd.AppendChild(inputxmldoc.CreateElement("AccountNumber")).InnerText = "112833".ToString();

        //string input = inputxmldoc.OuterXml;
        ////step3: do the qbxmlrp request
        //strrequestxml = inputxmldoc.OuterXml;
        //        // System.IO.File.AppendAllText(@"D:\Request.txt", strrequestxml + "\n\n");
        //        req.Add(strrequestxml);

        //        //IsCustomerInvoice = Helper.Check_InvoiceavailableFOrInsert(con);
        //        //if (IsCustomerInvoice && !IsItemInserted && !IsVendorInserted && !IsVendorfetched && !IsCOAccount && !IsItemFetched)
        //        //{
        //        //    ArrayList req = Helper.InsertXMLBlob_BillsQuery(con);
        //        //    total = Convert.ToInt32(Session["Invoicetotal"]);
        //        //    total = req.Count;
        //        //    count = Convert.ToInt32(Session["Invoicecounter"]);
        //        //    if (total > 0)
        //        //    {
        //        //        if (count < total)
        //        //        {
        //        //            request = req[count].ToString();
        //        //            Session["Invoicetotal"] = total;
        //        //        }
        //        //        else
        //        //        {
        //        //            count = 0;
        //        //            Session["Invoicecounter"] = 0;
        //        //            request = "";
        //        //        }
        //        //        evLogTxt = evLogTxt + "\r\n";
        //        //        evLogTxt = evLogTxt + "Return values: " + "\r\n";
        //        //        evLogTxt = evLogTxt + "string request = " + request + "\r\n";
        //        //        logEvent(evLogTxt);
        //        //        Session["IsCustomerInvoice"] = true;
        //        //    }


        //        //    }
        //        //XmlElement custaddrq = inputxmldoc.CreateElement("CustomerAddRq");
        //        ////qbxmlmsgsrq.AppendChild(custaddrq) ;
        //        //XmlElement customerAdd = inputxmldoc.CreateElement("InvoiceAdd");
        //        //custaddrq.AppendChild(customerAdd);
        //        //XmlElement InvoiceLineAdd = inputxmldoc.CreateElement("InvoiceLineAdd");
        //        //customerAdd.AppendChild(InvoiceLineAdd);
        //        //XmlElement ItemRef = inputxmldoc.CreateElement("ItemRef");
        //        //InvoiceLineAdd.AppendChild(ItemRef);
        //        //ItemRef.AppendChild(inputxmldoc.CreateElement("ListID")).InnerText = "80000005-1548835953";
        //        //ItemRef.AppendChild(inputxmldoc.CreateElement("FullName")).InnerText = "Test For PO";
        //        //InvoiceLineAdd.AppendChild(inputxmldoc.CreateElement("Quantity")).InnerText = Convert.ToString(200);
        //        //InvoiceLineAdd.AppendChild(inputxmldoc.CreateElement("Rate")).InnerText = Convert.ToString(300);



        //        //IsCustomerInvoice = Helper.Check_InvoiceavailableFOrInsert(con);
        //        //if (IsCustomerInvoice && !IsItemInserted && !IsVendorInserted && !IsVendorfetched && !IsCOAccount && !IsItemFetched)
        //        //{
        //        //    ArrayList req = Helper.InsertXMLBlob_BillsQuery(con);
        //        //    total = Convert.ToInt32(Session["Invoicetotal"]);
        //        //    total = req.Count;
        //        //    count = Convert.ToInt32(Session["Invoicecounter"]);
        //        //    if (total > 0)
        //        //    {
        //        //        if (count < total)
        //        //        {
        //        //            request = req[count].ToString();
        //        //            Session["Invoicetotal"] = total;
        //        //        }
        //        //        else
        //        //        {
        //        //            count = 0;
        //        //            Session["Invoicecounter"] = 0;
        //        //            request = "";
        //        //        }
        //        //        evLogTxt = evLogTxt + "\r\n";
        //        //        evLogTxt = evLogTxt + "Return values: " + "\r\n";
        //        //        evLogTxt = evLogTxt + "string request = " + request + "\r\n";
        //        //        logEvent(evLogTxt);
        //        //        Session["IsCustomerInvoice"] = true;
        //        //    }
        //        //}



        //        //IsCustomerInvoice = Helper.Check_CustomervailableFOrInsert(con);
        //        //if (IsCustomerInvoice && !IsItemInserted && !IsVendorInserted && !IsVendorfetched && !IsCOAccount && !IsItemFetched)
        //        //{
        //        //    ArrayList req = Helper.InsertXMLBlob_BillsQuery(con);
        //        //    total = Convert.ToInt32(Session["Invoicetotal"]);
        //        //    total = req.Count;
        //        //    count = Convert.ToInt32(Session["Invoicecounter"]);
        //        //    if (total > 0)
        //        //    {
        //        //        if (count < total)
        //        //        {
        //        //            request = req[count].ToString();
        //        //            Session["Invoicetotal"] = total;
        //        //        }
        //        //        else
        //        //        {
        //        //            count = 0;
        //        //            Session["Invoicecounter"] = 0;
        //        //            request = "";
        //        //        }
        //        //        evLogTxt = evLogTxt + "\r\n";
        //        //        evLogTxt = evLogTxt + "Return values: " + "\r\n";
        //        //        evLogTxt = evLogTxt + "string request = " + request + "\r\n";
        //        //        logEvent(evLogTxt);
        //        //        Session["IsCustomerInvoice"] = true;
        //        //    }
        //        //}


        //        // Add Customer
        //        //XmlElement custaddrq = inputxmldoc.CreateElement("CustomerAddRq");
        //        //qbxmlmsgsrq.AppendChild(custaddrq) ;
        //        //custaddrq.SetAttribute("requestID", "V1011".ToString());

        //        //XmlElement customerAdd = inputxmldoc.CreateElement("CustomerAdd");
        //        //custaddrq.AppendChild(customerAdd);
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Name")).InnerText = "MPPatel".ToString() + "(" + "P007".ToString() + ")";
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("IsActive")).InnerText = "1";
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("CompanyName")).InnerText = "MSSoft Pvt Ltd".ToString() ?? "";
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Salutation")).InnerText = "Mr";// "mr/mrs";
        //        //string VendorName = Convert.ToString("Patel Vendor");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("FirstName")).InnerText = VendorName.Length > 20 ? VendorName.Substring(0, 20) : VendorName;
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("LastName")).InnerText = "";

        //        //XmlElement customeraddress = inputxmldoc.CreateElement("BillAddress");
        //        //customerAdd.AppendChild(customeraddress);
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("Addr1")).InnerText = "Baton Rough".ToString() + " " + "Lousiana".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("City")).InnerText = "Baton Rough".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("State")).InnerText = "LA".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("PostalCode")).InnerText = "70801".ToString();

        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Phone")).InnerText = "001-12345678".ToString();

        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Email")).InnerText = "Vendor@gmail.com".ToString();
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("AccountNumber")).InnerText = "A1010".ToString();

        //        //Invoice insert from DB to QB


        //        // Add Vendors

        //        //XmlElement custaddrq = inputxmldoc.CreateElement("VendorAddRq");
        //        //qbxmlmsgsrq.AppendChild(custaddrq);
        //        //custaddrq.SetAttribute("requestID", "V101".ToString());

        //        //XmlElement customerAdd = inputxmldoc.CreateElement("VendorAdd");
        //        //custaddrq.AppendChild(customerAdd);
        //        ////customerAdd.AppendChild(inputxmldoc.CreateElement("Name")).InnerText = rdr["VendorName"].ToString() + "(" + rdr["VendorId"].ToString() + ")";
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Name")).InnerText = "Vraj ".ToString();
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("IsActive")).InnerText = "1";
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("CompanyName")).InnerText = "Vraj".ToString() ?? "";
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Salutation")).InnerText = "Mr";// "mr/mrs";
        //        //string VendorName = Convert.ToString("Vraj");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("FirstName")).InnerText = VendorName.Length > 20 ? VendorName.Substring(0, 20) : VendorName;
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("LastName")).InnerText = "";

        //        //XmlElement customeraddress = inputxmldoc.CreateElement("VendorAddress");
        //        //customerAdd.AppendChild(customeraddress);
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("Addr1")).InnerText = "Helix".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("Addr2")).InnerText = "Sayajigunj".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("City")).InnerText = "Vadodara".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("State")).InnerText = "Gujarat".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("PostalCode")).InnerText = "390022b".ToString();

        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Phone")).InnerText = "0091-265-2225954".ToString();
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Fax")).InnerText = "0091-265-2225954".ToString();
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Email")).InnerText = "V1@gmail.com".ToString();
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("AccountNumber")).InnerText = "A101".ToString();

        //        // Add Invoice in the exisiting Item Data


        //        //XmlElement custaddrq = inputxmldoc.CreateElement("InvoiceAddRq");
        //        //qbxmlmsgsrq.AppendChild(custaddrq);
        //        //custaddrq.SetAttribute("requestID", "InvoiceId".ToString());

        //        //XmlElement customerAdd = inputxmldoc.CreateElement("InvoiceAdd");
        //        //custaddrq.AppendChild(customerAdd);

        //        //XmlElement CustomerRef = inputxmldoc.CreateElement("CustomerRef");
        //        //customerAdd.AppendChild(CustomerRef);
        //        //CustomerRef.AppendChild(inputxmldoc.CreateElement("ListID")).InnerText = "80000008-1548423333".ToString();
        //        //CustomerRef.AppendChild(inputxmldoc.CreateElement("FullName")).InnerText = "B2C".ToString();

        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("TxnDate")).InnerText = Convert.ToDateTime("2019-01-31").ToString("yyyy-MM-dd");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("RefNumber")).InnerText = "I101".ToString();

        //        //XmlElement customeraddress = inputxmldoc.CreateElement("BillAddress");
        //        //customerAdd.AppendChild(customeraddress);
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("Addr1")).InnerText = "UK".ToString() + " " + "Harrow".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("City")).InnerText = "Harrow".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("State")).InnerText = "Harrow".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("PostalCode")).InnerText = "HA13AN".ToString();

        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("PONumber")).InnerText = "P101".ToString();
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("DueDate")).InnerText = Convert.ToDateTime("2019-02-10").ToString("yyyy-MM-dd");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Memo")).InnerText = "Test Data For Itesm".ToString();

        //        //XmlElement custaddrq = inputxmldoc.CreateElement("InvoiceAddRq");
        //        //qbxmlmsgsrq.AppendChild(custaddrq);
        //        //custaddrq.SetAttribute("requestID", "InvoiceId".ToString());

        //        //XmlElement customerAdd = inputxmldoc.CreateElement("InvoiceAdd");
        //        //custaddrq.AppendChild(customerAdd);

        //        //XmlElement CustomerRef = inputxmldoc.CreateElement("CustomerRef");
        //        //customerAdd.AppendChild(CustomerRef);
        //        //CustomerRef.AppendChild(inputxmldoc.CreateElement("ListID")).InnerText = "80000008-1548423333".ToString();
        //        //CustomerRef.AppendChild(inputxmldoc.CreateElement("FullName")).InnerText = "MP10001".ToString();

        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("TxnDate")).InnerText = Convert.ToDateTime("2019-02-13").ToString("yyyy-MM-dd");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("RefNumber")).InnerText = "I101".ToString();

        //        //XmlElement customeraddress = inputxmldoc.CreateElement("BillAddress");
        //        //customerAdd.AppendChild(customeraddress);
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("Addr1")).InnerText = "UK111".ToString() + " " + "Harrow111".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("City")).InnerText = "Harrow111".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("State")).InnerText = "Harrow1111".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("PostalCode")).InnerText = "HA13AN".ToString();

        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("PONumber")).InnerText = "P101".ToString();
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("DueDate")).InnerText = Convert.ToDateTime("2019-02-13").ToString("yyyy-MM-dd");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Memo")).InnerText = "Test Data For Itesm".ToString();

        //        // Call Items in the SendRequest to Get Items Detail  Data and then Add Invoice Details 

        //        //XmlElement InvoiceLineAdd = inputxmldoc.CreateElement("InvoiceLineAdd");
        //        //customerAdd.AppendChild(InvoiceLineAdd);
        //        //XmlElement ItemRef = inputxmldoc.CreateElement("ItemRef");
        //        //InvoiceLineAdd.AppendChild(ItemRef);
        //        //ItemRef.AppendChild(inputxmldoc.CreateElement("ListID")).InnerText = "80000005-1548835953";
        //        //ItemRef.AppendChild(inputxmldoc.CreateElement("FullName")).InnerText = "2";
        //        //InvoiceLineAdd.AppendChild(inputxmldoc.CreateElement("Quantity")).InnerText = "2";
        //        //InvoiceLineAdd.AppendChild(inputxmldoc.CreateElement("Rate")).InnerText = "100.00";

        //        // Add New Item


        //        //XmlElement custaddrq = inputxmldoc.CreateElement("ItemInventoryAddRq");
        //        //qbxmlmsgsrq.AppendChild(custaddrq);
        //        //custaddrq.SetAttribute("requestID", "InvoiceLineId".ToString());

        //        //XmlElement customerAdd = inputxmldoc.CreateElement("ItemInventoryAdd");
        //        //custaddrq.AppendChild(customerAdd);
        //        //string ItemName = Convert.ToString("ItemName");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Name")).InnerText = ItemName.Length > 20 ? ItemName.Substring(0, 20) : ItemName;

        //        //XmlElement IncomeAccountRef = inputxmldoc.CreateElement("IncomeAccountRef");
        //        //customerAdd.AppendChild(IncomeAccountRef);
        //        //IncomeAccountRef.AppendChild(inputxmldoc.CreateElement("ListID")).InnerText = "8000002B-1548860425".ToString();
        //        //IncomeAccountRef.AppendChild(inputxmldoc.CreateElement("FullName")).InnerText = "IncomeAccountRef".ToString();

        //        //XmlElement COGSAccountRef = inputxmldoc.CreateElement("COGSAccountRef");
        //        //customerAdd.AppendChild(COGSAccountRef);
        //        //COGSAccountRef.AppendChild(inputxmldoc.CreateElement("ListID")).InnerText = "80000029-1548149102".ToString();
        //        //COGSAccountRef.AppendChild(inputxmldoc.CreateElement("FullName")).InnerText = "Cost of Goods Sold".ToString();

        //        //XmlElement AssetAccountRef = inputxmldoc.CreateElement("AssetAccountRef");
        //        //customerAdd.AppendChild(AssetAccountRef);
        //        //AssetAccountRef.AppendChild(inputxmldoc.CreateElement("ListID")).InnerText = "8000002D-1548861151".ToString();
        //        //AssetAccountRef.AppendChild(inputxmldoc.CreateElement("FullName")).InnerText = "AssetAccountRef".ToString();

        //        //XmlElement custaddrq = inputxmldoc.CreateElement("ItemInventoryAddRq");
        //        //qbxmlmsgsrq.AppendChild(custaddrq);


        //        //XmlElement customerAdd = inputxmldoc.CreateElement("ItemInventoryAdd");
        //        //custaddrq.AppendChild(customerAdd);
        //        //string ItemType = Convert.ToString("ItemType");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("ItemType")).InnerText = "Other Charges".ToString();


        //        //string ItemName = Convert.ToString("ItemName");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("ItemType")).InnerText = "Item1".ToString();


        //        //string SubItemName = Convert.ToString("SubItemName");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("SubItemName")).InnerText = "Sub Item1".ToString();

        //        //string Description = Convert.ToString("Description");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Description")).InnerText = "Test Data for Item".ToString();


        //        //string Rate = Convert.ToString("Rate");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Rate")).InnerText = "102.10".ToString();


        //        //string Account = Convert.ToString("Account");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Account")).InnerText = "Expense".ToString();

        //        // Add Invoice (Needs to fix the issue)
        //        //XmlElement custaddrq = inputxmldoc.CreateElement("InvoiceAddRq");
        //        //qbxmlmsgsrq.AppendChild(custaddrq);
        //        //custaddrq.SetAttribute("requestID", "V101".ToString());

        //        //XmlElement customerAdd = inputxmldoc.CreateElement("InvoiceAdd");
        //        //custaddrq.AppendChild(customerAdd);

        //        //XmlElement CustomerRef = inputxmldoc.CreateElement("CustomerRef");
        //        //customerAdd.AppendChild(CustomerRef);
        //        //CustomerRef.AppendChild(inputxmldoc.CreateElement("ListID")).InnerText = "1".ToString();
        //        //CustomerRef.AppendChild(inputxmldoc.CreateElement("FullName")).InnerText = "Vraj Infotech".ToString();

        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("TxnDate")).InnerText = Convert.ToDateTime("01-23-2019").ToString("MM-dd-yyyy");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("RefNumber")).InnerText = "R001".ToString();

        //        //XmlElement customeraddress = inputxmldoc.CreateElement("BillAddress");
        //        //customerAdd.AppendChild(customeraddress);
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("Addr1")).InnerText = "Baton Rough".ToString() + " " + "Lousiana".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("City")).InnerText = "Baton Rough".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("State")).InnerText = "Lousiana".ToString();
        //        //customeraddress.AppendChild(inputxmldoc.CreateElement("PostalCode")).InnerText = "70801".ToString();

        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("PONumber")).InnerText = "PO_No001".ToString();
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("DueDate")).InnerText = Convert.ToDateTime("01-24-2019").ToString("MM-dd-yyyy");
        //        //customerAdd.AppendChild(inputxmldoc.CreateElement("Memo")).InnerText = "Test Data for Invoice".ToString();

        //        // Add Bills Tracker


        //        //  string input = inputxmldoc.OuterXml;
        //        //step3: do the qbxmlrp request

        //        // To Get Customer Data from Quick Book to DB
        //        //strrequestxml = "<?xml version=\"1.0\"?><?qbxml version=\"13.0\"?><QBXML><QBXMLMsgsRq onError=\"stopOnError\">" +
        //        //"<CustomerQueryRq  requestID=\"2\">" +
        //        //         "<ActiveStatus>ActiveOnly</ActiveStatus>" +
        //        //        "<IncludeRetElement>ListID</IncludeRetElement>" +
        //        //        "<IncludeRetElement>EditSequence</IncludeRetElement>" +
        //        //        "<IncludeRetElement>Name</IncludeRetElement>" +
        //        //        "<IncludeRetElement>FullName</IncludeRetElement>" +
        //        //        "<IncludeRetElement>IsActive</IncludeRetElement>" +
        //        //        "<IncludeRetElement>BillAddress</IncludeRetElement>" +
        //        //        "<IncludeRetElement>Phone</IncludeRetElement>" +
        //        //        "<IncludeRetElement>Email</IncludeRetElement>" +
        //        //        "<IncludeRetElement>AccountNumber</IncludeRetElement>" +
        //        //"</CustomerQueryRq>" +
        //        //"</QBXMLMsgsRq></QBXML>";


        //        //strrequestxml = inputxmldoc.OuterXml;
        //        ////strrequestxml = inputxmldoc.OuterXml;
        //        ////// System.IO.File.AppendAllText(@"D:\Request.txt", strrequestxml + "\n\n");
        //        ////req.Add(strrequestxml);

        //        return strrequestxml;
            
        #endregion




    }
}